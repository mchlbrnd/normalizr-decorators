/**
  * These rule settings are a broad, general recommendation for a good default
  * configuration, but should be tuned for personal or team preferences if needed.
  */

{
  "rules": {
    /**
      * Security Rules. The following rules should be turned on because they find security issues
      * or are recommended in the Microsoft Secure Development Lifecycle (SDL)
      */
    "insecure-random": true,
    "no-banned-terms": true,
    "no-delete-expression": true,
    "no-disable-auto-sanitization": true,
    "no-eval": true,
    "no-function-constructor-with-string-args": true,
    "no-http-string": [true, "http://www.example.com/?.*", "http://www.examples.com/?.*"],
    "no-octal-literal": true,
    "no-reserved-keywords": true,
    "no-string-based-set-immediate": true,
    "no-string-based-set-interval": true,
    "no-string-based-set-timeout": true,
    "non-literal-require": true,
    "possible-timing-attack": true,

    /**
      * Common Bugs and Correctness. The following rules should be turned on because they find
      * common bug patterns in the code or enforce type safety.
      */
    "forin": true,
    "no-any": false,
    "no-arg": true,
    "no-bitwise": true,
    "no-conditional-assignment": true,
    "no-console": [true, "debug", "info", "log", "time", "timeEnd", "trace"],
    "no-constant-condition": true,
    "no-control-regex": true,
    "no-duplicate-case": true,
    "no-duplicate-variable": true,
    "no-empty": true,
    "no-for-in-array": false,
    "no-increment-decrement": true,
    "no-invalid-regexp": true,
    "no-invalid-this": true,
    "no-regex-spaces": true,
    "no-sparse-arrays": true,
    "no-stateless-class": true,
    "no-string-literal": true,
    "no-string-throw": true,
    "no-unnecessary-bind": true,
    "no-unnecessary-override": true,
    "no-unsafe-finally": true,
    "no-unused-expression": true,
    "no-unused-new": true,
    "no-use-before-declare": false,
    "no-with-statement": true,
    "promise-must-complete": true,
    "radix": true,
    "switch-default": true,
    "triple-equals": [true, "allow-null-check"],
    "use-isnan": true,
    "use-named-parameter": true,
    "valid-typeof": true,

    /**
      * Code Clarity. The following rules should be turned on because they make the code
      * generally more clear to the reader.
      */
    "adjacent-overload-signatures": true,
    "array-type": [true, "array"],
    "arrow-parens": false, // for simple functions the parens on arrow functions are not needed
    "callable-types": true,
    "class-name": true,
    "comment-format": [true, "check-space", "check-uppercase"],
    "export-name": false,
    "function-name": false,
    "import-name": false,
    "interface-name": [false, "never-prefix"],
    "jsdoc-format": true,
    "max-classes-per-file": [true, 3],  // we generally recommend making one public class per file
    "max-file-line-count": [true, 500],
    "max-func-body-length": [true, 100, {"ignore-parameters-to-function-regex": "describe"}],
    "max-line-length": [true, 140],
    "member-access": true,
    "member-ordering": [true, { "order": "fields-first" }],
    "missing-jsdoc": false,
    "new-parens": true,
    "no-construct": true,
    "no-default-export": true,
    "no-empty-interfaces": true,
    "no-for-in": false,
    "no-function-expression": true,
    "no-inferrable-types": false, // turn no-inferrable-types off in order to make the code consistent in its use of type decorations
    "no-multiline-string": true, // multiline-strings often introduce unnecessary whitespace into the string literals
    "no-null-keyword": false, // turn no-null-keyword off and use undefined to mean not initialized and null to mean without a value
    "no-parameter-properties": true,
    "no-relative-imports": false,
    "no-require-imports": true,
    "no-shadowed-variable": true,
    "no-suspicious-comment": true,
    "no-typeof-undefined": true,
    "no-unnecessary-field-initialization": true,
    "no-unnecessary-local-variable": true,
    "no-var-keyword": true,
    "no-var-requires": true,
    "no-var-self": true,
    "object-literal-sort-keys": false, // turn object-literal-sort-keys off and sort keys in a meaningful manner
    "one-variable-per-declaration": [true, "ignore-for-loop"],
    "only-arrow-functions": false,  // there are many valid reasons to declare a function
    "ordered-imports": [true, "case-insensitive"],
    "prefer-array-literal": true,
    "prefer-const": false,
    "prefer-for-of": true,
    "typedef": [true, "call-signature", "parameter", "property-declaration", "variable-declaration", "member-variable-declaration"],
    "underscore-consistent-invocation": true,
    "unified-signatures": true,
    "variable-name": [true, "ban-keywords", "check-format", "allow-leading-underscore", "allow-pascal-case"],

    /**
      * Whitespace related rules. The only recommended whitespace strategy is to pick a single format and
      * be consistent.
      */
    "align": [true, "parameters", "statements"],
    "curly": true,
    "eofline": true,
    "import-spacing": true,
    "indent": [true, "spaces"],
    "linebreak-style": true,
    "no-consecutive-blank-lines": true,
    "no-empty-line-after-opening-brace": false,
    "no-single-line-block-comment": true,
    "no-trailing-whitespace": true,
    "no-unnecessary-semicolons": true,
    "object-literal-key-quotes": [true, "as-needed"],
    "one-line": [true, "check-open-brace", "check-catch", "check-else", "check-whitespace"],
    "quotemark": [true, "single"],
    "semicolon": [true, "always"],
    "trailing-comma": [true, {"singleline": "never", "multiline": "always"}], // forcing trailing commas for multi-line
    "typedef-whitespace": [
      true,
      {
        "call-signature": "nospace",
        "index-signature": "nospace",
        "parameter": "nospace",
        "property-declaration": "nospace",
        "variable-declaration": "nospace"
      },
      {
        "call-signature": "onespace",
        "index-signature": "onespace",
        "parameter": "onespace",
        "property-declaration": "onespace",
        "variable-declaration": "onespace"
      }
    ],
    "whitespace": [true, "check-branch", "check-decl", "check-operator", "check-separator", "check-type"],

    /**
      * Controversial/Configurable rules.
      */
    "ban": false,                // only enable this if you have some code pattern that you want to ban
    "cyclomatic-complexity": false,
    "file-header": false,  // enable this rule only if you are legally required to add a file header
    "import-blacklist": false,  // enable and configure this as you desire
    "interface-over-type-literal": false,  // there are plenty of reasons to prefer interfaces
    "no-angle-bracket-type-assertion": false,  // pick either type-cast format and use it consistently
    "no-empty-interface": false,  // it is currently better to use the MS version of this rule
    "no-inferred-empty-object-type": false,  // if the compiler is satisfied then this is probably not an issue
    "no-internal-module": false, // only enable this if you are not using internal modules
    "no-magic-numbers": false,  // by default it will find too many false positives
    "no-mergeable-namespace": false,  // your project may require mergeable namespaces
    "no-namespace": false,       // only enable this if you are not using modules/namespaces
    "no-reference": true,        // in general you should use a module system and not /// reference imports
    "no-unexternalized-strings": false, // the VS Code team has a specific localization process that this rule enforces
    "object-literal-shorthand": false,  // object-literal-shorthand offers an abbreviation not an abstraction
    "prefer-type-cast": true,   // pick either type-cast format and use it consistently
    "space-before-function-paren": false,   // turn this on if this is really your coding standard

    /**
      * Deprecated rules.  The following rules are deprecated for various reasons.
      */
    "missing-optional-annotation": false,  // now supported by TypeScript compiler
    "no-duplicate-parameter-names": false, // now supported by TypeScript compiler
    "no-missing-visibility-modifiers": false, // use tslint member-access rule instead
    "no-multiple-var-decl": false,         // use tslint one-variable-per-declaration rule instead
    "no-switch-case-fall-through": false,  // now supported by TypeScript compiler
    "no-unused-imports": false,            // use tslint no-unused-variable rule instead
//    "no-unused-variable": false,           // now supported by TypeScript 2.0 compiler
    "typeof-compare": false                // the valid-typeof rule is currently superior to this version
  },
  "rulesDirectory": [
    "node_modules/tslint-microsoft-contrib"
  ]
}